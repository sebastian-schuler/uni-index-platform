generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model category {
  id               Int                @id(map: "SubjectType_pkey") @default(autoincrement())
  url              String             @unique(map: "Unique SubjectType URL") @db.VarChar
  name_en          String             @db.VarChar
  name_native      String             @unique(map: "Unique SubjectType Native Name") @db.VarChar
  popularity_score Int                @default(0)
  native_lang      String             @db.VarChar
  subject_category subject_category[]
}

model city {
  id               String             @id(map: "City2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @unique(map: "city name is unique") @db.VarChar
  url              String             @unique(map: "city url is unique") @db.VarChar
  state_id         String             @db.VarChar
  popularity_score Int                @default(0)
  postcodes        String[]           @db.VarChar
  state            state              @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city belongs to state")
  institution      institution[]
  institution_city institution_city[]
  subject          subject[]
}

model country {
  id               String           @id(map: "Country_pkey") @db.VarChar(3)
  url              String           @unique(map: "Unique Country URL ") @db.VarChar
  translations     Json?            @db.Json
  name             String           @db.VarChar
  popularity_score Int              @default(0)
  country_code     String           @db.VarChar(2)
  country_socials  country_socials?
  state            state[]
}

model country_socials {
  country_id              String  @id(map: "CountrySocialMedia_pkey") @db.VarChar
  last_update             BigInt
  rated_institution_count Int     @default(0)
  avg_total_score         Decimal @default(0) @db.Decimal
  avg_twitter_score       Decimal @default(0) @db.Decimal
  avg_youtube_score       Decimal @default(0) @db.Decimal
  avg_instagram_score     Decimal @default(0) @db.Decimal
  avg_facebook_score      Decimal @default(0) @db.Decimal
  avg_twitter_profile     Json?   @db.Json
  avg_youtube_profile     Json?   @db.Json
  avg_instagram_profile   Json?   @db.Json
  avg_facebook_profile    Json?   @db.Json
  country                 country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "SocialMediaCountry id of country")
}

model institution {
  id                     String                   @id(map: "Institution2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @unique(map: "Institution name unique") @db.VarChar
  url                    String                   @unique(map: "Institution url unique") @db.VarChar
  website                String                   @unique(map: "Institution website unique") @db.VarChar
  main_location          String                   @db.Uuid
  popularity_score       Int                      @default(0)
  is_hrk_source          Boolean                  @default(false)
  omar_id                String?                  @db.Uuid
  institution_omar       institution_omar?        @relation(fields: [omar_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Institution has Online Marketing Object")
  city                   city                     @relation(fields: [main_location], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Institution main location in city")
  institution_city       institution_city[]
  institution_screenshot institution_screenshot[]
  institution_socials    institution_socials?
  subject                subject[]
  user                   user[]
}

model institution_city {
  institution_id String      @db.Uuid
  city_id        String      @db.Uuid
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institution has many locations")
  city           city        @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many locations belong to many institutions")

  @@id([institution_id, city_id], map: "InstitutionLocation2_pkey")
}

model institution_socials {
  institution_id  String      @id(map: "InstitutionSocialMedia2_pkey") @db.Uuid
  twitter_url     String?     @db.VarChar
  facebook_url    String?     @db.VarChar
  youtube_url     String?     @db.VarChar
  instagram_url   String?     @db.VarChar
  last_update     BigInt
  total_score     Decimal     @default(0) @db.Decimal
  twitter_score   Decimal     @default(0) @db.Decimal
  youtube_score   Decimal     @default(0) @db.Decimal
  instagram_score Decimal     @default(0) @db.Decimal
  facebook_score  Decimal     @default(0) @db.Decimal
  twitter_data    Json?       @db.Json
  youtube_data    Json?       @db.Json
  instagram_data  Json?       @db.Json
  facebook_data   Json?       @db.Json
  institution     institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institution has social media stats")
}

model state {
  id               String  @id(map: "State_pkey") @db.VarChar
  url              String  @unique(map: "Unique State URL") @db.VarChar
  name_native      String  @db.VarChar
  country_id       String  @db.VarChar
  name_en          String? @db.VarChar
  popularity_score Int     @default(0)
  state_code       String  @unique(map: "State code") @db.VarChar
  city             city[]
  country          country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "State inside Country")
}

model subject {
  id                   String             @unique(map: "Subject ID is unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url                  String             @db.VarChar
  institution_id       String             @db.Uuid
  city_id              String             @db.Uuid
  name                 String             @db.VarChar
  duration             Int
  duration_type        String             @db.VarChar
  degree               String             @db.VarChar
  admission            String             @db.VarChar
  website              String             @db.VarChar
  is_further_education Boolean
  popularity_score     Int                @default(0)
  file_index           Int                @unique(map: "Subject has unique index in file")
  institution          institution        @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Subject belongs to Institution")
  city                 city               @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Subject is located in City")
  subject_category     subject_category[]
  user_ad              user_ad[]

  @@id([url, institution_id], map: "Subject2_pkey")
}

model subject_category {
  subject_id      String   @db.Uuid
  subject_type_id Int
  subject         subject  @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many subjects have many types")
  category        category @relation(fields: [subject_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many types have many subjects")

  @@id([subject_id, subject_type_id], map: "SubjectHasSubjectTypes_pkey")
}

model user {
  id              String         @id(map: "User2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String         @unique(map: "Email only used once") @db.VarChar
  password        String         @db.VarChar
  institution_id  String         @db.Uuid
  date_registered BigInt
  preferred_lang  String         @db.VarChar
  institution     institution    @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User belongs to institution")
  user_ad         user_ad[]
  user_article    user_article[]
  user_session    user_session[]
}

model user_ad {
  id           String      @id(map: "UserAd2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String      @db.Uuid
  booked_until BigInt
  subject_id   String?     @db.Uuid
  type         String      @db.VarChar
  size         Int
  description  String?     @db.VarChar
  image_id     String?     @db.Uuid
  date_booked  BigInt
  placement    Json        @db.Json
  title        Json?       @db.Json
  booked_from  BigInt
  user         user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad belongs to user")
  user_image   user_image? @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad has image")
  subject      subject?    @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad is for subject")
}

model user_article {
  id          String     @id(map: "UserAdPost_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String     @db.Uuid
  url         String     @db.VarChar
  date_posted BigInt
  excerpt     String     @db.VarChar
  image_id    String     @db.Uuid
  content     Json       @db.Json
  title       Json       @db.Json
  user_image  user_image @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Article has image")
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User has AdPosts")

  @@unique([url, user_id], map: "UserAdPost_url_user_id_key")
}

model user_image {
  id           String         @id(map: "UserAdImage_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  upload_date  BigInt
  filetype     String         @db.VarChar
  user_ad      user_ad[]
  user_article user_article[]
}

model user_session {
  token    String @id(map: "UserSession_pkey") @db.VarChar
  user_id  String @db.Uuid
  lifetime BigInt
  user     user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session belongs to user")
}

model institution_screenshot {
  id             Int         @id(map: "InstitutionScreenshots_pkey") @default(autoincrement())
  institution_id String      @db.Uuid
  filename       String      @db.VarChar
  timestamp      Decimal     @db.Decimal
  url            String      @db.VarChar
  screen_index   Int
  type           String      @db.VarChar
  pair_index     Int
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Institution has screenshots")

  @@unique([institution_id, filename], map: "filename per institution is unique")
  @@unique([institution_id, screen_index], map: "screenshot index per institution unique")
}

model institution_omar {
  id          String        @id(map: "test_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        Int?
  institution institution[]
}
