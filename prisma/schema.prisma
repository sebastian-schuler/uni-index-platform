generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id                  String                @id(map: "City2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @unique(map: "city name is unique") @db.VarChar
  url                 String                @unique(map: "city url is unique") @db.VarChar
  state_id            String                @db.VarChar
  popularity_score    Int                   @default(0)
  postcodes           String[]              @db.VarChar
  State               State                 @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city belongs to state")
  Institution         Institution[]
  InstitutionLocation InstitutionLocation[]
  Subject             Subject[]
}

model Country {
  id               String  @id @db.VarChar(3)
  url              String  @unique(map: "Unique Country URL ") @db.VarChar
  translations     Json?   @db.Json
  name             String  @db.VarChar
  popularity_score Int     @default(0)
  country_code     String  @db.VarChar(2)
  State            State[]
}

model Institution {
  id                     String                  @id(map: "Institution2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                  @unique(map: "Institution name unique") @db.VarChar
  url                    String                  @unique(map: "Institution url unique") @db.VarChar
  website                String                  @unique(map: "Institution website unique") @db.VarChar
  main_location          String                  @db.Uuid
  popularity_score       Int                     @default(0)
  City                   City                    @relation(fields: [main_location], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Institution main location in city")
  InstitutionLocation    InstitutionLocation[]
  InstitutionSocialMedia InstitutionSocialMedia?
  Subject                Subject[]
  User                   User[]
}

model InstitutionLocation {
  institution_id String      @db.Uuid
  city_id        String      @db.Uuid
  Institution    Institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institution has many locations")
  City           City        @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many locations belong to many institutions")

  @@id([institution_id, city_id], map: "InstitutionLocation2_pkey")
}

model InstitutionSocialMedia {
  institution_id    String      @id(map: "InstitutionSocialMedia2_pkey") @db.Uuid
  twitter_url       String?     @db.VarChar
  facebook_url      String?     @db.VarChar
  youtube_url       String?     @db.VarChar
  instagram_url     String?     @db.VarChar
  total_score       Int         @default(0)
  last_update       BigInt
  twitter_results   String?     @db.VarChar
  facebook_results  String?     @db.VarChar
  youtube_results   String?     @db.VarChar
  instagram_results String?     @db.VarChar
  twitter_scores    String?     @db.VarChar
  facebook_scores   String?     @db.VarChar
  youtube_scores    String?     @db.VarChar
  instagram_scores  String?     @db.VarChar
  Institution       Institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institution has social media stats")
}

model State {
  id               String  @id @db.VarChar
  url              String  @unique(map: "Unique State URL") @db.VarChar
  name_native      String  @db.VarChar
  country_id       String  @db.VarChar
  name_en          String? @db.VarChar
  popularity_score Int     @default(0)
  state_code       String  @unique(map: "State code") @db.VarChar
  Country          Country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "State inside Country")
  City             City[]
}

model Subject {
  id                     String                   @unique(map: "Subject ID is unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url                    String                   @db.VarChar
  institution_id         String                   @db.Uuid
  city_id                String                   @db.Uuid
  name                   String                   @db.VarChar
  duration               Int
  duration_type          String                   @db.VarChar
  degree                 String                   @db.VarChar
  admission              String                   @db.VarChar
  website                String                   @db.VarChar
  is_further_education   Boolean
  popularity_score       Int                      @default(0)
  file_index             Int                      @unique(map: "Subject has unique index in file")
  Institution            Institution              @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Subject belongs to Institution")
  City                   City                     @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Subject is located in City")
  SubjectHasSubjectTypes SubjectHasSubjectTypes[]
  UserAd                 UserAd[]

  @@id([url, institution_id], map: "Subject2_pkey")
}

model SubjectType {
  id                     Int                      @id @default(autoincrement())
  url                    String                   @unique(map: "Unique SubjectType URL") @db.VarChar
  name_en                String                   @db.VarChar
  name_native            String                   @unique(map: "Unique SubjectType Native Name") @db.VarChar
  popularity_score       Int                      @default(0)
  native_lang            String                   @db.VarChar
  SubjectHasSubjectTypes SubjectHasSubjectTypes[]
}

model User {
  id              String        @id(map: "User2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String        @unique(map: "Email only used once") @db.VarChar
  password        String        @db.VarChar
  institution_id  String        @db.Uuid
  date_registered BigInt
  Institution     Institution   @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User belongs to institution")
  UserAd          UserAd[]
  UserSession     UserSession[]
}

model UserAd {
  id           String       @id(map: "UserAd2_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String       @db.Uuid
  booked_until BigInt
  subject_id   String?      @db.Uuid
  type         String       @db.VarChar
  placement    String[]     @db.VarChar
  size         Int
  description  String?      @db.VarChar
  image_id     String?      @db.Uuid
  date_booked  BigInt
  User         User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad belongs to user")
  UserAdImage  UserAdImage? @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad has image")
  Subject      Subject?     @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ad is for subject")
}

model SubjectHasSubjectTypes {
  subject_id      String      @db.Uuid
  subject_type_id Int
  Subject         Subject     @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many subjects have many types")
  SubjectType     SubjectType @relation(fields: [subject_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "many types have many subjects")

  @@id([subject_id, subject_type_id])
}

model UserAdImage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  upload_date BigInt
  filename    String   @unique(map: "image filename unique") @db.VarChar
  UserAd      UserAd[]
}

model UserSession {
  token    String @id @db.VarChar
  user_id  String @db.Uuid
  lifetime BigInt
  User     User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session belongs to user")
}
